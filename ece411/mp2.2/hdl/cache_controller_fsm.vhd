-- VHDL Entity ece411.Cache_Controller.interface
--
-- Created:
--          by - adalton2.ews (gelib-057-16.ews.illinois.edu)
--          at - 01:57:06 02/20/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Controller IS
   PORT( 
      CLK         : IN     STD_LOGIC;
      PMRESP_H    : IN     STD_LOGIC;
      RESET_L     : IN     STD_LOGIC;
      WayMuxDirty : IN     std_logic;
      hit         : IN     std_logic;
      read        : IN     std_logic;
      write       : IN     std_logic;
      AddrSel     : OUT    std_logic;
      LD_Cache    : OUT    std_logic;
      MRESPSel    : OUT    std_logic;
      PMREAD_L    : OUT    STD_LOGIC;
      PMWRITE_L   : OUT    STD_LOGIC;
      cont_RESP_H : OUT    std_logic
   );

-- Declarations

END Cache_Controller ;

--
-- VHDL Architecture ece411.Cache_Controller.fsm
--
-- Created:
--          by - adalton2.ews (gelib-057-16.ews.illinois.edu)
--          at - 01:57:06 02/20/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Cache_Controller IS

   TYPE STATE_TYPE IS (
      READ_CACHE,
      WRITE_PMEM,
      READ_PMEM,
      WRITE_CACHE,
      RESP
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      CLK,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= READ_CACHE;
      ELSIF (CLK'EVENT AND CLK = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      PMRESP_H,
      WayMuxDirty,
      current_state,
      hit,
      read,
      write
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN READ_CACHE => 
            IF (hit = '0' AND
                WayMuxDirty = '1' AND
                (read = '1' OR write = '1')) THEN 
               next_state <= WRITE_PMEM;
            ELSIF (hit = '0' AND
                   WayMuxDirty = '0' AND
                   (read = '1' OR write = '1')) THEN 
               next_state <= READ_PMEM;
            ELSIF (write = '1' AND
                   hit = '1') THEN 
               next_state <= WRITE_CACHE;
            ELSE
               next_state <= READ_CACHE;
            END IF;
         WHEN WRITE_PMEM => 
            IF (PMRESP_H = '1') THEN 
               next_state <= READ_PMEM;
            ELSE
               next_state <= WRITE_PMEM;
            END IF;
         WHEN READ_PMEM => 
            IF (PMRESP_H = '1') THEN 
               next_state <= WRITE_CACHE;
            ELSE
               next_state <= READ_PMEM;
            END IF;
         WHEN WRITE_CACHE => 
            next_state <= RESP;
         WHEN RESP => 
            next_state <= READ_CACHE;
         WHEN OTHERS =>
            next_state <= READ_CACHE;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      AddrSel <= '0';
      LD_Cache <= '0';
      MRESPSel <= '0';
      PMREAD_L <= '1';
      PMWRITE_L <= '1';
      cont_RESP_H <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN READ_CACHE => 
            MRESPSel <= '1';
         WHEN WRITE_PMEM => 
            PMWRITE_L <= '0' after 6ns;
            AddrSel <= '1';
         WHEN READ_PMEM => 
            PMREAD_L <= '0' after 6ns;
         WHEN WRITE_CACHE => 
            LD_Cache <= '1';
         WHEN RESP => 
            cont_RESP_H <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
