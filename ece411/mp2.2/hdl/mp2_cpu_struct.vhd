-- VHDL Entity ece411.mp2_CPU.symbol
--
-- Created:
--          by - adalton2.ews (gelib-057-05.ews.illinois.edu)
--          at - 20:45:54 02/20/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY mp2_CPU IS
   PORT( 
      RESET_L : IN     std_logic;
      START_H : IN     std_logic
   );

-- Declarations

END mp2_CPU ;

--
-- VHDL Architecture ece411.mp2_CPU.struct
--
-- Created:
--          by - adalton2.ews (gelib-057-05.ews.illinois.edu)
--          at - 20:45:54 02/20/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF mp2_CPU IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADDRESS   : LC3b_word;
   SIGNAL ALUMuxSel : LC3B_8MUX_SEL;
   SIGNAL ALUop     : LC3b_aluop;
   SIGNAL CheckN    : std_logic;
   SIGNAL CheckP    : std_logic;
   SIGNAL CheckZ    : std_logic;
   SIGNAL DATAIN    : LC3b_word;
   SIGNAL DATAOUT   : LC3b_word;
   SIGNAL DRMuxSel  : std_logic;
   SIGNAL HighLow   : std_logic;
   SIGNAL LoadIR    : std_logic;
   SIGNAL LoadMAR   : std_logic;
   SIGNAL LoadMDR   : std_logic;
   SIGNAL LoadNZP   : std_logic;
   SIGNAL LoadPC    : std_logic;
   SIGNAL MARMuxSel : LC3B_4MUX_SEL;
   SIGNAL MDRMuxSel : std_logic;
   SIGNAL MREAD_L   : std_logic;
   SIGNAL MRESP_H   : std_logic;
   SIGNAL MWRITEH_L : std_logic;
   SIGNAL MWRITEL_L : std_logic;
   SIGNAL Opcode    : LC3b_opcode;
   SIGNAL PCMuxSel  : LC3B_8MUX_SEL;
   SIGNAL RFMuxSel  : LC3B_8MUX_SEL;
   SIGNAL RegWrite  : std_logic;
   SIGNAL StoreSR   : lc3b_4MUX_SEL;
   SIGNAL clk       : std_logic := '0';
   SIGNAL n         : std_logic;
   SIGNAL p         : std_logic;
   SIGNAL shftop    : LC3B_SHFTOP;
   SIGNAL z         : std_logic;


   -- Component Declarations
   COMPONENT CLKgen
   PORT (
      clk : INOUT  std_logic  := '0'
   );
   END COMPONENT;
   COMPONENT Control
   PORT (
      ADDRESS   : IN     LC3b_word ;
      CheckN    : IN     std_logic ;
      CheckP    : IN     std_logic ;
      CheckZ    : IN     std_logic ;
      HighLow   : IN     std_logic ;
      MRESP_H   : IN     std_logic ;
      Opcode    : IN     LC3b_opcode ;
      RESET_L   : IN     std_logic ;
      START_H   : IN     std_logic ;
      clk       : IN     std_logic ;
      n         : IN     std_logic ;
      p         : IN     std_logic ;
      shftop    : IN     LC3B_SHFTOP ;
      z         : IN     std_logic ;
      ALUMuxSel : OUT    LC3B_8MUX_SEL ;
      ALUop     : OUT    LC3b_aluop ;
      DRMuxSel  : OUT    std_logic ;
      LoadIR    : OUT    std_logic ;
      LoadMAR   : OUT    std_logic ;
      LoadMDR   : OUT    std_logic ;
      LoadNZP   : OUT    std_logic ;
      LoadPC    : OUT    std_logic ;
      MARMuxSel : OUT    LC3B_4MUX_SEL ;
      MDRMuxSel : OUT    std_logic ;
      MREAD_L   : OUT    std_logic ;
      MWRITEH_L : OUT    std_logic ;
      MWRITEL_L : OUT    std_logic ;
      PCMuxSel  : OUT    LC3B_8MUX_SEL ;
      RFMuxSel  : OUT    LC3B_8MUX_SEL ;
      RegWrite  : OUT    std_logic ;
      StoreSR   : OUT    lc3b_4MUX_SEL 
   );
   END COMPONENT;
   COMPONENT DRAMAuditor
   PORT (
      ADDRESS   : IN     LC3b_word ;
      MREAD_L   : IN     std_logic ;
      MWRITEH_L : IN     std_logic ;
      MWRITEL_L : IN     std_logic ;
      RESET_L   : IN     std_logic ;
      clk       : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT Datapath
   PORT (
      ALUMuxSel : IN     LC3B_8MUX_SEL ;
      ALUop     : IN     LC3b_aluop ;
      DATAIN    : IN     LC3b_word ;
      DRMuxSel  : IN     std_logic ;
      LoadIR    : IN     std_logic ;
      LoadMAR   : IN     std_logic ;
      LoadMDR   : IN     std_logic ;
      LoadNZP   : IN     std_logic ;
      LoadPC    : IN     std_logic ;
      MARMuxSel : IN     LC3B_4MUX_SEL ;
      MDRMuxSel : IN     std_logic ;
      PCMuxSel  : IN     LC3B_8MUX_SEL ;
      RESET_L   : IN     std_logic ;
      RFMuxSel  : IN     LC3B_8MUX_SEL ;
      RegWrite  : IN     std_logic ;
      StoreSR   : IN     lc3b_4MUX_SEL ;
      clk       : IN     std_logic ;
      ADDRESS   : OUT    LC3b_word ;
      CheckN    : OUT    std_logic ;
      CheckP    : OUT    std_logic ;
      CheckZ    : OUT    std_logic ;
      DATAOUT   : OUT    LC3b_word ;
      HighLow   : OUT    std_logic ;
      Opcode    : OUT    LC3b_opcode ;
      n         : OUT    std_logic ;
      p         : OUT    std_logic ;
      shftop    : OUT    LC3B_SHFTOP ;
      z         : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Memory
   PORT (
      ADDRESS   : IN     LC3b_word ;
      CLK       : IN     STD_LOGIC ;
      DATAOUT   : IN     LC3b_word ;
      MREAD_L   : IN     std_logic ;
      MWRITEH_L : IN     std_logic ;
      MWRITEL_L : IN     std_logic ;
      RESET_L   : IN     STD_LOGIC ;
      DATAIN    : OUT    LC3b_word ;
      MRESP_H   : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : CLKgen USE ENTITY ece411.CLKgen;
   FOR ALL : Control USE ENTITY ece411.Control;
   FOR ALL : DRAMAuditor USE ENTITY ece411.DRAMAuditor;
   FOR ALL : Datapath USE ENTITY ece411.Datapath;
   FOR ALL : Memory USE ENTITY ece411.Memory;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   I0 : CLKgen
      PORT MAP (
         clk => clk
      );
   ControlUnit : Control
      PORT MAP (
         ADDRESS   => ADDRESS,
         CheckN    => CheckN,
         CheckP    => CheckP,
         CheckZ    => CheckZ,
         HighLow   => HighLow,
         MRESP_H   => MRESP_H,
         Opcode    => Opcode,
         RESET_L   => RESET_L,
         START_H   => START_H,
         clk       => clk,
         n         => n,
         p         => p,
         shftop    => shftop,
         z         => z,
         ALUMuxSel => ALUMuxSel,
         ALUop     => ALUop,
         DRMuxSel  => DRMuxSel,
         LoadIR    => LoadIR,
         LoadMAR   => LoadMAR,
         LoadMDR   => LoadMDR,
         LoadNZP   => LoadNZP,
         LoadPC    => LoadPC,
         MARMuxSel => MARMuxSel,
         MDRMuxSel => MDRMuxSel,
         MREAD_L   => MREAD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         PCMuxSel  => PCMuxSel,
         RFMuxSel  => RFMuxSel,
         RegWrite  => RegWrite,
         StoreSR   => StoreSR
      );
   Auditor : DRAMAuditor
      PORT MAP (
         ADDRESS   => ADDRESS,
         MREAD_L   => MREAD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         RESET_L   => RESET_L,
         clk       => clk
      );
   theDatapath : Datapath
      PORT MAP (
         ALUMuxSel => ALUMuxSel,
         ALUop     => ALUop,
         DATAIN    => DATAIN,
         DRMuxSel  => DRMuxSel,
         LoadIR    => LoadIR,
         LoadMAR   => LoadMAR,
         LoadMDR   => LoadMDR,
         LoadNZP   => LoadNZP,
         LoadPC    => LoadPC,
         MARMuxSel => MARMuxSel,
         MDRMuxSel => MDRMuxSel,
         PCMuxSel  => PCMuxSel,
         RESET_L   => RESET_L,
         RFMuxSel  => RFMuxSel,
         RegWrite  => RegWrite,
         StoreSR   => StoreSR,
         clk       => clk,
         ADDRESS   => ADDRESS,
         CheckN    => CheckN,
         CheckP    => CheckP,
         CheckZ    => CheckZ,
         DATAOUT   => DATAOUT,
         HighLow   => HighLow,
         Opcode    => Opcode,
         n         => n,
         p         => p,
         shftop    => shftop,
         z         => z
      );
   DRAM : Memory
      PORT MAP (
         ADDRESS   => ADDRESS,
         DATAOUT   => DATAOUT,
         MREAD_L   => MREAD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         RESET_L   => RESET_L,
         clk       => clk,
         DATAIN    => DATAIN,
         MRESP_H   => MRESP_H
      );

END struct;
