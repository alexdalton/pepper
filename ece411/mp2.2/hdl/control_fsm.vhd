-- VHDL Entity ece411.Control.interface
--
-- Created:
--          by - adalton2.ews (gelib-057-03.ews.illinois.edu)
--          at - 03:29:10 02/07/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Control IS
   PORT( 
      ADDRESS   : IN     LC3b_word;
      CheckN    : IN     std_logic;
      CheckP    : IN     std_logic;
      CheckZ    : IN     std_logic;
      HighLow   : IN     std_logic;
      MRESP_H   : IN     std_logic;
      Opcode    : IN     LC3b_opcode;
      RESET_L   : IN     std_logic;
      START_H   : IN     std_logic;
      clk       : IN     std_logic;
      n         : IN     std_logic;
      p         : IN     std_logic;
      shftop    : IN     LC3B_SHFTOP;
      z         : IN     std_logic;
      ALUMuxSel : OUT    LC3B_8MUX_SEL;
      ALUop     : OUT    LC3b_aluop;
      DRMuxSel  : OUT    std_logic;
      LoadIR    : OUT    std_logic;
      LoadMAR   : OUT    std_logic;
      LoadMDR   : OUT    std_logic;
      LoadNZP   : OUT    std_logic;
      LoadPC    : OUT    std_logic;
      MARMuxSel : OUT    LC3B_4MUX_SEL;
      MDRMuxSel : OUT    std_logic;
      MREAD_L   : OUT    std_logic;
      MWRITEH_L : OUT    std_logic;
      MWRITEL_L : OUT    std_logic;
      PCMuxSel  : OUT    LC3B_8MUX_SEL;
      RFMuxSel  : OUT    LC3B_8MUX_SEL;
      RegWrite  : OUT    std_logic;
      StoreSR   : OUT    lc3b_4MUX_SEL
   );

-- Declarations

END Control ;

--
-- VHDL Architecture ece411.Control.fsm
--
-- Created:
--          by - adalton2.ews (gelib-057-03.ews.illinois.edu)
--          at - 03:29:10 02/07/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Control IS

   TYPE STATE_TYPE IS (
      Reset,
      Decode,
      BR1,
      BR2,
      ADD,
      L_AND,
      L_NOT,
      IF1,
      IF2,
      IF3,
      CalcADDR,
      ST1,
      LD1,
      LD2,
      ST2,
      LEA,
      JUMP,
      shift,
      aSLL,
      aSRL,
      aSRA,
      JSR,
      CalcADDR1,
      Read1,
      Read2,
      LDI1,
      STI1,
      LDI2,
      STI2,
      R7PC,
      TRAP1,
      TRAP2,
      TRAP0,
      CalcADDR2,
      LDB1,
      STB1,
      LDB2,
      STB2,
      STB3,
      STB4,
      STB5
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= Reset;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      CheckN,
      CheckP,
      CheckZ,
      HighLow,
      MRESP_H,
      Opcode,
      START_H,
      current_state,
      n,
      p,
      shftop,
      z
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN Reset => 
            IF (START_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= Reset;
            END IF;
         WHEN Decode => 
            IF (Opcode = op_br) THEN 
               next_state <= BR1;
            ELSIF ((Opcode = op_ldr) OR
                   (Opcode = op_str)) THEN 
               next_state <= CalcADDR;
            ELSIF (Opcode = op_not) THEN 
               next_state <= L_NOT;
            ELSIF (Opcode = op_and) THEN 
               next_state <= L_AND;
            ELSIF (Opcode = op_shf) THEN 
               next_state <= shift;
            ELSIF (Opcode = op_add) THEN 
               next_state <= ADD;
            ELSIF (Opcode = op_lea) THEN 
               next_state <= LEA;
            ELSIF (Opcode = op_jmp) THEN 
               next_state <= JUMP;
            ELSIF ((Opcode = op_sti) OR
                   (Opcode = op_ldi)) THEN 
               next_state <= CalcADDR1;
            ELSIF ((Opcode = op_jsr) OR
                   (Opcode = op_trap)) THEN 
               next_state <= R7PC;
            ELSIF ((Opcode = op_stb) OR
                   (Opcode = op_ldb)) THEN 
               next_state <= CalcADDR2;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN BR1 => 
            IF (( ( n and CheckN ) OR
                ( p AND CheckP) OR
                ( z AND CheckZ) ) = '1') THEN 
               next_state <= BR2;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN BR2 => 
            next_state <= IF1;
         WHEN ADD => 
            next_state <= IF1;
         WHEN L_AND => 
            next_state <= IF1;
         WHEN L_NOT => 
            next_state <= IF1;
         WHEN IF1 => 
            next_state <= IF2;
         WHEN IF2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF3;
            ELSE
               next_state <= IF2;
            END IF;
         WHEN IF3 => 
            next_state <= Decode;
         WHEN CalcADDR => 
            IF (Opcode = op_str) THEN 
               next_state <= ST1;
            ELSIF (Opcode = op_ldr) THEN 
               next_state <= LD1;
            ELSE
               next_state <= CalcADDR;
            END IF;
         WHEN ST1 => 
            next_state <= ST2;
         WHEN LD1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LD2;
            ELSE
               next_state <= LD1;
            END IF;
         WHEN LD2 => 
            next_state <= IF1;
         WHEN ST2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= ST2;
            END IF;
         WHEN LEA => 
            next_state <= IF1;
         WHEN JUMP => 
            next_state <= IF1;
         WHEN shift => 
            IF (shftop = "10") THEN 
               next_state <= aSLL;
            ELSIF (shftop = "01") THEN 
               next_state <= aSRL;
            ELSIF (shftop = "11") THEN 
               next_state <= aSRA;
            ELSE
               next_state <= shift;
            END IF;
         WHEN aSLL => 
            next_state <= IF1;
         WHEN aSRL => 
            next_state <= IF1;
         WHEN aSRA => 
            next_state <= IF1;
         WHEN JSR => 
            next_state <= IF1;
         WHEN CalcADDR1 => 
            next_state <= Read1;
         WHEN Read1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= Read2;
            ELSE
               next_state <= Read1;
            END IF;
         WHEN Read2 => 
            IF (Opcode = op_ldi) THEN 
               next_state <= LDI1;
            ELSIF (Opcode = op_sti) THEN 
               next_state <= STI1;
            ELSE
               next_state <= Read2;
            END IF;
         WHEN LDI1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDI2;
            ELSE
               next_state <= LDI1;
            END IF;
         WHEN STI1 => 
            next_state <= STI2;
         WHEN LDI2 => 
            next_state <= IF1;
         WHEN STI2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STI2;
            END IF;
         WHEN R7PC => 
            IF (Opcode = op_jsr) THEN 
               next_state <= JSR;
            ELSIF (Opcode = op_trap) THEN 
               next_state <= TRAP0;
            ELSE
               next_state <= R7PC;
            END IF;
         WHEN TRAP1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= TRAP2;
            ELSE
               next_state <= TRAP1;
            END IF;
         WHEN TRAP2 => 
            next_state <= IF1;
         WHEN TRAP0 => 
            next_state <= TRAP1;
         WHEN CalcADDR2 => 
            IF (Opcode = op_ldb) THEN 
               next_state <= LDB1;
            ELSIF (Opcode = op_stb) THEN 
               next_state <= STB1;
            ELSE
               next_state <= CalcADDR2;
            END IF;
         WHEN LDB1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDB2;
            ELSE
               next_state <= LDB1;
            END IF;
         WHEN STB1 => 
            IF (HighLow = '0') THEN 
               next_state <= STB2;
            ELSIF (HighLow = '1') THEN 
               next_state <= STB3;
            ELSE
               next_state <= STB1;
            END IF;
         WHEN LDB2 => 
            next_state <= IF1;
         WHEN STB2 => 
            next_state <= STB4;
         WHEN STB3 => 
            next_state <= STB5;
         WHEN STB4 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STB4;
            END IF;
         WHEN STB5 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STB5;
            END IF;
         WHEN OTHERS =>
            next_state <= Reset;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      ALUMuxSel <=  "000";
      ALUop <= "000";
      DRMuxSel <= '0';
      LoadIR <= '0';
      LoadMAR <= '0';
      LoadMDR <= '0';
      LoadNZP <= '0';
      LoadPC <= '0';
      MARMuxSel <= "00";
      MDRMuxSel <= '0';
      MREAD_L <= '1';
      MWRITEH_L <= '1';
      MWRITEL_L <= '1';
      PCMuxSel <= "000";
      RFMuxSel <= "000";
      RegWrite <= '0';
      StoreSR <= "01";

      -- Combined Actions
      CASE current_state IS
         WHEN BR2 => 
            PCMuxSel <= "001";
            LoadPC <= '1';
         WHEN ADD => 
            ALUop <= alu_add;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "001";
         WHEN L_AND => 
            ALUop <= alu_and;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "001";
         WHEN L_NOT => 
            ALUop <= alu_not;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "001";
         WHEN IF1 => 
            LoadMAR <= '1';
            LoadPC <= '1';
         WHEN IF2 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6 ns;
         WHEN IF3 => 
            LoadIR <= '1';
         WHEN CalcADDR => 
            ALUMuxSel <= "001";
            ALUop <= alu_add;
            MARMuxSel <= "01";
            LoadMAR <= '1';
         WHEN ST1 => 
            StoreSR <= "00";
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
         WHEN LD1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN LD2 => 
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN ST2 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN LEA => 
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "010";
         WHEN JUMP => 
            PCMuxSel <= "010";
            LoadPC <= '1';
         WHEN shift => 
            ALUMuxSel <= "010";
         WHEN aSLL => 
            ALUop <= alu_sll;
            ALUMuxSel <= "010";
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "001";
         WHEN aSRL => 
            ALUop <= alu_srl;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "001";
            ALUMuxSel <= "010";
         WHEN aSRA => 
            ALUop <= alu_sra;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "001";
            ALUMuxSel <= "010";
         WHEN JSR => 
            PCMuxSel <= "011";
            LoadPC <= '1';
         WHEN CalcADDR1 => 
            ALUMuxSel <= "001";
            ALUop <= alu_add;
            MARMuxSel <= "01";
            LoadMAR <= '1';
         WHEN Read1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN Read2 => 
            MARMuxSel <= "10";
            LoadMAR <= '1';
         WHEN LDI1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN STI1 => 
            StoreSR <= "00";
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
         WHEN LDI2 => 
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN STI2 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN R7PC => 
            DRMuxSel <= '1';
            RFMuxSel <= "011";
            RegWrite <= '1';
         WHEN TRAP1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN TRAP2 => 
            LoadPC <= '1';
            PCMuxSel <= "100";
         WHEN TRAP0 => 
            LoadMAR<= '1';
            MARMuxSel <= "11";
         WHEN CalcADDR2 => 
            ALUMuxSel <= "011";
            ALUop <= alu_add;
            MARMuxSel <= "01";
            LoadMAR <= '1';
         WHEN LDB1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN LDB2 => 
            RFMuxSel <= "100";
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN STB2 => 
            LoadMDR <= '1';
            StoreSR <= "00";
            ALUop <= alu_pass;
            MDRMuxSel <= '1';
         WHEN STB3 => 
            LoadMDR <= '1';
            StoreSR <= "00";
            ALUop <= alu_sll;
            ALUMuxSel <= "100";
            MDRMuxSel <= '1';
         WHEN STB4 => 
            MWRITEL_L <= '0' after 6ns;
         WHEN STB5 => 
            MWRITEH_L <= '0' after 6ns;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
