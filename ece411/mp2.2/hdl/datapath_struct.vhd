-- VHDL Entity ece411.Datapath.interface
--
-- Created:
--          by - adalton2.ews (gelib-057-03.ews.illinois.edu)
--          at - 03:29:10 02/07/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      ALUMuxSel : IN     LC3B_8MUX_SEL;
      ALUop     : IN     LC3b_aluop;
      DATAIN    : IN     LC3b_word;
      DRMuxSel  : IN     std_logic;
      LoadIR    : IN     std_logic;
      LoadMAR   : IN     std_logic;
      LoadMDR   : IN     std_logic;
      LoadNZP   : IN     std_logic;
      LoadPC    : IN     std_logic;
      MARMuxSel : IN     LC3B_4MUX_SEL;
      MDRMuxSel : IN     std_logic;
      PCMuxSel  : IN     LC3B_8MUX_SEL;
      RESET_L   : IN     std_logic;
      RFMuxSel  : IN     LC3B_8MUX_SEL;
      RegWrite  : IN     std_logic;
      StoreSR   : IN     lc3b_4MUX_SEL;
      clk       : IN     std_logic;
      ADDRESS   : OUT    LC3b_word;
      CheckN    : OUT    std_logic;
      CheckP    : OUT    std_logic;
      CheckZ    : OUT    std_logic;
      DATAOUT   : OUT    LC3b_word;
      HighLow   : OUT    std_logic;
      Opcode    : OUT    LC3b_opcode;
      n         : OUT    std_logic;
      p         : OUT    std_logic;
      shftop    : OUT    LC3B_SHFTOP;
      z         : OUT    std_logic
   );

-- Declarations

END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Created:
--          by - adalton2.ews (gelib-057-03.ews.illinois.edu)
--          at - 03:29:10 02/07/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ11out    : LC3B_word;
   SIGNAL ADJ6out     : LC3b_word;
   SIGNAL ADJ9out     : LC3b_word;
   SIGNAL ALUMuxout   : LC3b_word;
   SIGNAL ALUMuxout1  : LC3b_word;
   SIGNAL ALUout      : LC3b_word;
   SIGNAL BRaddout    : LC3b_word;
   SIGNAL GenCCout    : LC3b_cc;
   SIGNAL JSRMuxOut   : LC3b_word;
   SIGNAL JSRaddout   : LC3b_word;
   SIGNAL MARMuxout   : LC3b_word;
   SIGNAL MDRMuxout   : LC3b_word;
   SIGNAL MDROUT      : LC3b_word;
   SIGNAL PCMuxout    : LC3b_word;
   SIGNAL PCPlus2out  : LC3b_word;
   SIGNAL PCout       : LC3b_word;
   SIGNAL RFAout      : LC3b_word;
   SIGNAL RFBout      : LC3b_word;
   SIGNAL RFMuxout    : LC3b_word;
   SIGNAL SEXT5out    : LC3b_word;
   SIGNAL SEXT6out    : LC3b_word;
   SIGNAL SrcA        : LC3b_reg;
   SIGNAL SrcB        : LC3b_reg;
   SIGNAL StoreMuxout : LC3b_reg;
   SIGNAL ZEXT4Out    : LC3b_word;
   SIGNAL ZEXT8Out    : LC3b_word;
   SIGNAL byteOut     : LC3b_byte;
   SIGNAL const8out   : lc3b_word;
   SIGNAL dest        : LC3b_reg;
   SIGNAL dest1       : LC3b_reg;
   SIGNAL imm4        : LC3b_nibble;
   SIGNAL imm5        : LC3b_imm5;
   SIGNAL index6      : LC3b_index6;
   SIGNAL ir11        : std_logic;
   SIGNAL ir5         : std_logic;
   SIGNAL offset11    : LC3B_OFFSET11;
   SIGNAL offset9     : LC3b_offset9;
   SIGNAL trapvect8   : LC3B_TRAPVECT8;
   SIGNAL zextrap8    : LC3b_word;

   -- Implicit buffer signal declarations
   SIGNAL ADDRESS_internal : LC3b_word;


   -- Component Declarations
   COMPONENT ADJ11
   PORT (
      clk      : IN     std_logic ;
      offset11 : IN     LC3B_OFFSET11 ;
      ADJ11out : OUT    LC3B_word 
   );
   END COMPONENT;
   COMPONENT ADJ6
   PORT (
      clk     : IN     std_logic ;
      index6  : IN     LC3b_index6 ;
      ADJ6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ8
   PORT (
      clk       : IN     std_logic ;
      trapvect8 : IN     LC3B_TRAPVECT8 ;
      zextrap8  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      clk     : IN     std_logic ;
      offset9 : IN     LC3b_offset9 ;
      ADJ9out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ALU
   PORT (
      ALUMuxout : IN     LC3b_word ;
      ALUop     : IN     LC3b_aluop ;
      RFAout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      ALUout    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT BRadd
   PORT (
      ADJ9out  : IN     LC3b_word ;
      PCout    : IN     LC3b_word ;
      clk      : IN     std_logic ;
      BRaddout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT DRMux
   PORT (
      DRMuxSel : IN     std_logic ;
      clk      : IN     std_logic ;
      dest1    : IN     LC3b_reg ;
      dest     : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT GenCC
   PORT (
      RFMuxout : IN     LC3b_word ;
      clk      : IN     std_logic ;
      GenCCout : OUT    LC3b_cc 
   );
   END COMPONENT;
   COMPONENT IR
   PORT (
      LoadIR    : IN     std_logic ;
      MDROUT    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      Opcode    : OUT    LC3b_opcode ;
      SrcA      : OUT    LC3b_reg ;
      SrcB      : OUT    LC3b_reg ;
      dest1     : OUT    LC3b_reg ;
      index6    : OUT    LC3b_index6 ;
      imm5      : OUT    LC3b_imm5 ;
      offset9   : OUT    LC3b_offset9 ;
      ir5       : OUT    std_logic ;
      ir11      : OUT    std_logic ;
      imm4      : OUT    LC3b_nibble ;
      offset11  : OUT    LC3B_OFFSET11 ;
      shftop    : OUT    LC3B_SHFTOP ;
      trapvect8 : OUT    LC3B_TRAPVECT8 
   );
   END COMPONENT;
   COMPONENT JSRadd
   PORT (
      ADJ11out  : IN     LC3B_word ;
      clk       : IN     std_logic ;
      PCout     : IN     LC3b_word ;
      JSRaddout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT LD_align
   PORT (
      ADDRESS : IN     LC3b_word ;
      MDROUT  : IN     LC3b_word ;
      clk     : IN     std_logic ;
      HighLow : OUT    std_logic ;
      byteOut : OUT    LC3b_byte 
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      GenCCout : IN     LC3b_cc ;
      LoadNZP  : IN     std_logic ;
      clk      : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZPsplit
   PORT (
      clk    : IN     std_logic ;
      dest   : IN     LC3b_reg ;
      CheckN : OUT    std_logic ;
      CheckP : OUT    std_logic ;
      CheckZ : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word ;
      clk        : IN     std_logic ;
      PCPlus2out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      Input  : IN     LC3b_word ;
      RESET  : IN     std_logic ;
      clk    : IN     std_logic ;
      load   : IN     std_logic ;
      Output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegFile
   PORT (
      RESET_L     : IN     std_logic ;
      RFMuxout    : IN     LC3b_word ;
      RegWrite    : IN     std_logic ;
      SrcB        : IN     LC3b_reg ;
      StoreMuxout : IN     LC3b_reg ;
      clk         : IN     std_logic ;
      RFAout      : OUT    LC3b_word ;
      RFBout      : OUT    LC3b_word ;
      dest        : IN     LC3b_reg 
   );
   END COMPONENT;
   COMPONENT SEXT5
   PORT (
      clk      : IN     std_logic ;
      imm5     : IN     LC3b_imm5 ;
      SEXT5out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT SEXT6
   PORT (
      clk      : IN     std_logic ;
      index6   : IN     LC3b_index6 ;
      SEXT6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT StoreMux
   PORT (
      SrcA        : IN     LC3b_reg ;
      StoreSR     : IN     lc3b_4MUX_SEL ;
      clk         : IN     std_logic ;
      StoreMuxout : OUT    LC3b_reg ;
      dest1       : IN     LC3b_reg 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      C   : IN     LC3b_word ;
      D   : IN     LC3b_word ;
      Sel : IN     LC3B_4MUX_SEL ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux8
   PORT (
      A   : IN     lc3b_word ;
      B   : IN     lc3b_word ;
      C   : IN     lc3b_word ;
      D   : IN     lc3b_word ;
      E   : IN     lc3b_word ;
      F   : IN     lc3b_word ;
      G   : IN     lc3b_word ;
      H   : IN     lc3b_word ;
      Sel : IN     lc3b_8mux_sel ;
      I   : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT ZEXT4
   PORT (
      clk      : IN     std_logic ;
      imm4     : IN     LC3b_nibble ;
      ZEXT4Out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ZEXT8
   PORT (
      byteOut  : IN     LC3b_byte ;
      clk      : IN     std_logic ;
      ZEXT8Out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT const8
   PORT (
      clk       : IN     std_logic ;
      const8out : OUT    lc3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ11 USE ENTITY ece411.ADJ11;
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ8 USE ENTITY ece411.ADJ8;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : ALU USE ENTITY ece411.ALU;
   FOR ALL : BRadd USE ENTITY ece411.BRadd;
   FOR ALL : DRMux USE ENTITY ece411.DRMux;
   FOR ALL : GenCC USE ENTITY ece411.GenCC;
   FOR ALL : IR USE ENTITY ece411.IR;
   FOR ALL : JSRadd USE ENTITY ece411.JSRadd;
   FOR ALL : LD_align USE ENTITY ece411.LD_align;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : NZPsplit USE ENTITY ece411.NZPsplit;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : RegFile USE ENTITY ece411.RegFile;
   FOR ALL : SEXT5 USE ENTITY ece411.SEXT5;
   FOR ALL : SEXT6 USE ENTITY ece411.SEXT6;
   FOR ALL : StoreMux USE ENTITY ece411.StoreMux;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : WordMux8 USE ENTITY ece411.WordMux8;
   FOR ALL : ZEXT4 USE ENTITY ece411.ZEXT4;
   FOR ALL : ZEXT8 USE ENTITY ece411.ZEXT8;
   FOR ALL : const8 USE ENTITY ece411.const8;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- Dataout = MDRout
   DATAOUT <= MDRout;


   -- Instance port mappings.
   aADJ11 : ADJ11
      PORT MAP (
         clk      => clk,
         offset11 => offset11,
         ADJ11out => ADJ11out
      );
   aADJ6 : ADJ6
      PORT MAP (
         clk     => clk,
         index6  => index6,
         ADJ6out => ADJ6out
      );
   aADJ8 : ADJ8
      PORT MAP (
         clk       => clk,
         trapvect8 => trapvect8,
         zextrap8  => zextrap8
      );
   aADJ9 : ADJ9
      PORT MAP (
         clk     => clk,
         offset9 => offset9,
         ADJ9out => ADJ9out
      );
   aALU : ALU
      PORT MAP (
         ALUMuxout => ALUMuxout,
         ALUop     => ALUop,
         RFAout    => RFAout,
         clk       => clk,
         ALUout    => ALUout
      );
   aBRadd : BRadd
      PORT MAP (
         ADJ9out  => ADJ9out,
         PCout    => PCout,
         clk      => clk,
         BRaddout => BRaddout
      );
   aDRMux : DRMux
      PORT MAP (
         DRMuxSel => DRMuxSel,
         clk      => clk,
         dest1    => dest1,
         dest     => dest
      );
   aGenCC : GenCC
      PORT MAP (
         RFMuxout => RFMuxout,
         clk      => clk,
         GenCCout => GenCCout
      );
   aIR : IR
      PORT MAP (
         LoadIR    => LoadIR,
         MDROUT    => MDROUT,
         clk       => clk,
         Opcode    => Opcode,
         SrcA      => SrcA,
         SrcB      => SrcB,
         dest1     => dest1,
         index6    => index6,
         imm5      => imm5,
         offset9   => offset9,
         ir5       => ir5,
         ir11      => ir11,
         imm4      => imm4,
         offset11  => offset11,
         shftop    => shftop,
         trapvect8 => trapvect8
      );
   aJSRadd : JSRadd
      PORT MAP (
         ADJ11out  => ADJ11out,
         clk       => clk,
         PCout     => PCout,
         JSRaddout => JSRaddout
      );
   aLD_align : LD_align
      PORT MAP (
         ADDRESS => ADDRESS_internal,
         MDROUT  => MDROUT,
         clk     => clk,
         HighLow => HighLow,
         byteOut => byteOut
      );
   aNZP : NZP
      PORT MAP (
         GenCCout => GenCCout,
         LoadNZP  => LoadNZP,
         clk      => clk,
         n        => n,
         p        => p,
         z        => z
      );
   aNZPsplit : NZPsplit
      PORT MAP (
         clk    => clk,
         dest   => dest,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ
      );
   aPlus2 : Plus2
      PORT MAP (
         PCout      => PCout,
         clk        => clk,
         PCPlus2out => PCPlus2out
      );
   MAR : Reg16
      PORT MAP (
         Input  => MARMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMAR,
         Output => ADDRESS_internal
      );
   MDR : Reg16
      PORT MAP (
         Input  => MDRMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMDR,
         Output => MDROUT
      );
   PC : Reg16
      PORT MAP (
         Input  => PCMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadPC,
         Output => PCout
      );
   aRegFile : RegFile
      PORT MAP (
         RESET_L     => RESET_L,
         RFMuxout    => RFMuxout,
         RegWrite    => RegWrite,
         SrcB        => SrcB,
         StoreMuxout => StoreMuxout,
         clk         => clk,
         RFAout      => RFAout,
         RFBout      => RFBout,
         dest        => dest
      );
   aSEXT5 : SEXT5
      PORT MAP (
         clk      => clk,
         imm5     => imm5,
         SEXT5out => SEXT5out
      );
   aSEXT6 : SEXT6
      PORT MAP (
         clk      => clk,
         index6   => index6,
         SEXT6out => SEXT6out
      );
   aStoreMux : StoreMux
      PORT MAP (
         SrcA        => SrcA,
         StoreSR     => StoreSR,
         clk         => clk,
         StoreMuxout => StoreMuxout,
         dest1       => dest1
      );
   ALUMux : WordMux2
      PORT MAP (
         A   => RFBout,
         B   => SEXT5out,
         Sel => ir5,
         F   => ALUMuxout1
      );
   JSRMux : WordMux2
      PORT MAP (
         A   => RFAout,
         B   => JSRaddout,
         Sel => ir11,
         F   => JSRMuxOut
      );
   MDRMux : WordMux2
      PORT MAP (
         A   => DATAIN,
         B   => ALUout,
         Sel => MDRMuxSel,
         F   => MDRMuxout
      );
   MARMux : WordMux4
      PORT MAP (
         A   => PCout,
         B   => ALUout,
         C   => MDROUT,
         D   => zextrap8,
         Sel => MARMuxSel,
         F   => MARMuxout
      );
   ALUMux1 : WordMux8
      PORT MAP (
         A   => ALUMuxout1,
         B   => ADJ6out,
         C   => ZEXT4Out,
         D   => SEXT6out,
         E   => const8out,
         F   => const8out,
         G   => const8out,
         H   => const8out,
         Sel => ALUMuxSel,
         I   => ALUMuxout
      );
   PCMux : WordMux8
      PORT MAP (
         A   => PCPlus2out,
         B   => BRaddout,
         C   => RFAout,
         D   => JSRMuxOut,
         E   => MDROUT,
         F   => MDROUT,
         G   => MDROUT,
         H   => MDROUT,
         Sel => PCMuxSel,
         I   => PCMuxout
      );
   RFMux : WordMux8
      PORT MAP (
         A   => MDROUT,
         B   => ALUout,
         C   => BRaddout,
         D   => PCout,
         E   => ZEXT8Out,
         F   => ZEXT8Out,
         G   => ZEXT8Out,
         H   => ZEXT8Out,
         Sel => RFMuxSel,
         I   => RFMuxout
      );
   aZEXT4 : ZEXT4
      PORT MAP (
         clk      => clk,
         imm4     => imm4,
         ZEXT4Out => ZEXT4Out
      );
   aZEXT8 : ZEXT8
      PORT MAP (
         byteOut  => byteOut,
         clk      => clk,
         ZEXT8Out => ZEXT8Out
      );
   aconst8 : const8
      PORT MAP (
         clk       => clk,
         const8out => const8out
      );

   -- Implicit buffered output assignments
   ADDRESS <= ADDRESS_internal;

END struct;
